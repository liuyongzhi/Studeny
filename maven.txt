POM 项目对象模型

<project>
groupId：定义当前Maven隶属的实际项目
artifactId：定义当前实际项目中的一个Maven项目（模板）
version：定义Maven项目当前所处的版本
packaging:定义Maven项目的打包方式
classifier：定义构建输出的一些附属构件
scope：依赖范围
</project>


Maven功能
（1）、管理项目依赖

Maven的优势：
（1）、节省空间
（2）、管理方便

坐标
依赖
（1）、传递性依赖
（2）、依赖调节原则：第一原则：最近者优先；第二原则：第一原则优先，在依赖路径长度相等的前提下，在POM中依赖声明的顺序决定谁会被解析，顺序最靠前的那个依赖优先
（3）、可选依赖
（4）、排除依赖
（5）、归类依赖
（6）、优化依赖

仓库
（1）、仓库的布局
（2）、仓库的分类
（3）、远程仓库的配置
	releases的enable值为true时，表示开启仓库的发布版本下载支持
	snapshots的enabled值为false时，表示关闭仓库的快照版本支持
	snapshots的uodatePolicy用来配置Maven从远程仓库检查更新的频率
	snapShots的checksumPolicy用来配置Maven检查检验和文件的策略
（4）、远程仓库的认证
（5）、部署至远程仓库
	distributionManagement包含repository和snapshotRepository子元素
	repository表示发布版本构件的仓库
	snapshotRepository表示快照版本的仓库
（6）、从仓库解析依赖的机制（未看）
（7）、镜像
（8）、Nexus是当前最流行的开源Maven仓库管理软件；nexus提供关键字搜索、类名搜索、坐标搜索、检验和搜索等功能

生命周期和插件




不理解的问题？
#######（1）、在POM.xml中怎么确定依赖文件的坐标
（2）、怎么确定没必要的依赖
#######（3）、如何及时的将远程仓库中依赖的构件更新到项目中
#######（4）、什么是快照
（5）、从仓库解析依赖的机制
#######（6）、POM配置文件有时报错
（7）、插件的查询
（8）、项目怎么配置先从远程仓库中下载；如果找不到，再到中央仓库下载
（9）、快捷键有时不好使
（10）、怎么在eclipse怎么引入git